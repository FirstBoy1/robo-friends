{"version":3,"sources":["redux/robots/robots.types.js","redux/robots/robots.reducer.js","redux/root-reducer.js","redux/store.js","components/card/card.component.jsx","components/spinner/spinner.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","redux/robots/robots.actions.js","components/error-boundary/error-boundary.component.jsx","App.js","serviceWorker.js","index.js"],"names":["robotActionTypes","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_START","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","SET_ROBOTS","INITIAL_STATE","robots","searchField","isLoading","error","robotsReducer","state","action","type","payload","rootReducer","combineReducers","middlewares","thunkMiddleware","store","createStore","applyMiddleware","Card","robot","className","src","id","alt","name","email","Spinner","connect","filteredRobots","filter","toLowerCase","includes","map","key","dispatch","onSearchChange","event","text","target","value","aria-label","onChange","placeholder","ErrorBoundary","hasErrored","info","console","log","this","props","children","React","Component","App","requestRobots","setRobots","fetch","then","data","json","users","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b6fda4dc.chunk.js","sourcesContent":["const robotActionTypes = {\r\n    CHANGE_SEARCH_FIELD: 'CHANGE_SEARCH_FIELD',\r\n    REQUEST_ROBOTS_START: 'REQUEST_ROBOTS_START',\r\n    REQUEST_ROBOTS_SUCCESS: 'REQUEST_ROBOTS_SUCCESS',\r\n    REQUEST_ROBOTS_FAILED: 'REQUEST_ROBOTS_FAILED',\r\n    SET_ROBOTS: 'SET_ROBOTS'\r\n}\r\n\r\nexport default robotActionTypes;","import robotActionTypes from \"./robots.types\";\r\n\r\nconst INITIAL_STATE = {\r\n  robots: [],\r\n  searchField: \"\",\r\n  isLoading: false,\r\n  error: ''\r\n};\r\n\r\nconst robotsReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case robotActionTypes.SET_ROBOTS:\r\n      return {\r\n        ...state,\r\n        robots: action.payload\r\n      }\r\n\r\n    case robotActionTypes.REQUEST_ROBOTS_START:\r\n      return {\r\n        ...state,\r\n        isLoading: true\r\n      }\r\n    case robotActionTypes.REQUEST_ROBOTS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        robots: action.payload\r\n      }\r\n    case robotActionTypes.REQUEST_ROBOTS_FAILED:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        error: action.payload\r\n      }\r\n    case robotActionTypes.CHANGE_SEARCH_FIELD:\r\n      return {\r\n        ...state,\r\n        searchField: action.payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default robotsReducer;\r\n","import { combineReducers } from 'redux';\r\n\r\nimport robotsReducer from './robots/robots.reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    robots: robotsReducer\r\n});\r\n\r\nexport default rootReducer;","import {createStore, applyMiddleware} from 'redux';\r\nimport logger from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nimport rootReducer from './root-reducer';\r\n\r\nconst middlewares = [thunkMiddleware];\r\n\r\nif(process.env.NODE_ENV === 'development') {\r\n    middlewares.push(logger);\r\n}\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares));","import React from \"react\";\r\n\r\nimport './card.styles.css';\r\nconst Card = ({ robot }) => (\r\n  <div className=\"card\">\r\n    <img src={`https://robohash.org/${robot.id}?size=200x200`} alt=\"robot\" />\r\n    <h2>{robot.name}</h2>\r\n    <p>{robot.email}</p>\r\n  </div>\r\n);\r\n\r\nexport default Card;\r\n","import React from 'react';\r\n\r\nimport './spinner.styles.css';\r\n\r\nconst Spinner = () => (\r\n    <div className='spinner-container'>\r\n        <div className='spinner' />\r\n    </div>\r\n);\r\n\r\nexport default Spinner;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport Card from \"../card/card.component\";\r\nimport Spinner from '../spinner/spinner.component';\r\n\r\nimport \"./card-list.styles.css\";\r\n\r\nconst CardList = ({ robots, searchField, isLoading }) => {\r\n  const filteredRobots = robots.filter(robot =>\r\n    robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n  );\r\n\r\n  return (\r\n    <div className=\"card-list\">\r\n      {isLoading ? (\r\n        <Spinner/>\r\n      ) : (\r\n        filteredRobots.map(robot => <Card key={robot.id} robot={robot} />)\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  searchField: state.robots.searchField,\r\n  robots: state.robots.robots,\r\n  isLoading: state.robots.isLoading\r\n});\r\n\r\nexport default connect(mapStateToProps)(CardList);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { setSearchField } from \"../../redux/robots/robots.actions\";\r\n\r\nimport \"./search-box.styles.css\";\r\n\r\nconst SearchBox = ({ onSearchChange }) => {\r\n\r\n  return (\r\n    <input\r\n      aria-label=\"Search Robots\"\r\n      className=\"search-box\"\r\n      type=\"search\"\r\n      onChange={onSearchChange}\r\n      placeholder=\"search robots\"\r\n    />\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSearchChange: event => dispatch(setSearchField(event.target.value))\r\n});\r\n\r\nexport default connect(\r\n  null,\r\n  mapDispatchToProps\r\n)(SearchBox);\r\n","import robotActionTypes from \"./robots.types\";\r\n\r\nexport const setRobots = robots => ({\r\n    type: robotActionTypes.SET_ROBOTS,\r\n    payload: robots\r\n});\r\n\r\nexport const setSearchField = text => ({\r\n    type: robotActionTypes.CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n});\r\n\r\nexport const requestRobots = () => dispatch => {\r\n    dispatch({ type: robotActionTypes.REQUEST_ROBOTS_START });\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then(data => data.json())\r\n      .then(users =>\r\n        dispatch({\r\n          type: robotActionTypes.REQUEST_ROBOTS_SUCCESS,\r\n          payload: users\r\n        })\r\n      )\r\n      .catch(error =>\r\n        dispatch({\r\n          type: robotActionTypes.REQUEST_ROBOTS_FAILED,\r\n          payload: error\r\n        })\r\n      );\r\n  };","import React from \"react\";\r\n\r\nimport \"./error-boundary.styles.css\";\r\n\r\nclass ErrorBoundary extends React.Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      hasErrored: false\r\n    };\r\n  }\r\n\r\n  static getDerivedStateFromError(error) {\r\n    return { hasErrored: true };\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    console.log(error);\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasErrored) {\r\n      return (\r\n        <div className=\"error-image-overlay\">\r\n          <img src=\"https://i.imgur.com/yW2W9SC.png\" alt=\"error\" />\r\n          <h2>This page is broken</h2>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport CardList from \"./components/card-list/card-list.component\";\nimport SearchBox from \"./components/search-box/search-box.component\";\nimport ErrorBoundary from './components/error-boundary/error-boundary.component';\n\nimport { setRobots, requestRobots } from \"./redux/robots/robots.actions\";\n\nimport \"./App.css\";\n\nclass App extends React.Component {\n  \n  componentDidMount() {\n    this.props.requestRobots();\n  }\n\n  render() {\n    return (\n      <ErrorBoundary>\n        <div className=\"App\">\n          <h1>Robo Friends</h1>\n          <SearchBox />\n          <hr />\n          <CardList />\n        </div>\n      </ErrorBoundary>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  setRobots: robots => dispatch(setRobots(robots)),\n  requestRobots: () => dispatch(requestRobots())\n});\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport { store } from \"./redux/store\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}