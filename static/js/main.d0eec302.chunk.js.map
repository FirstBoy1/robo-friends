{"version":3,"sources":["redux/robots/robots.types.js","redux/robots/robots.reducer.js","redux/root-reducer.js","redux/store.js","components/card/card.component.jsx","components/spinner/spinner.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","redux/robots/robots.actions.js","components/error-boundary/error-boundary.component.jsx","App.js","index.js"],"names":["robotActionTypes","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_START","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","SET_ROBOTS","INITIAL_STATE","robots","searchField","isLoading","error","robotsReducer","state","action","type","payload","rootReducer","combineReducers","middlewares","thunkMiddleware","store","createStore","applyMiddleware","Card","robot","className","src","id","alt","name","email","Spinner","connect","filteredRobots","filter","toLowerCase","includes","map","key","dispatch","onSearchChange","event","text","target","value","onChange","placeholder","ErrorBoundary","hasErrored","info","console","log","this","props","children","React","Component","App","requestRobots","setRobots","fetch","then","data","json","users","catch","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d0eec302.chunk.js","sourcesContent":["const robotActionTypes = {\r\n    CHANGE_SEARCH_FIELD: 'CHANGE_SEARCH_FIELD',\r\n    REQUEST_ROBOTS_START: 'REQUEST_ROBOTS_START',\r\n    REQUEST_ROBOTS_SUCCESS: 'REQUEST_ROBOTS_SUCCESS',\r\n    REQUEST_ROBOTS_FAILED: 'REQUEST_ROBOTS_FAILED',\r\n    SET_ROBOTS: 'SET_ROBOTS'\r\n}\r\n\r\nexport default robotActionTypes;","import robotActionTypes from \"./robots.types\";\r\n\r\nconst INITIAL_STATE = {\r\n  robots: [],\r\n  searchField: \"\",\r\n  isLoading: false,\r\n  error: ''\r\n};\r\n\r\nconst robotsReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case robotActionTypes.SET_ROBOTS:\r\n      return {\r\n        ...state,\r\n        robots: action.payload\r\n      }\r\n\r\n    case robotActionTypes.REQUEST_ROBOTS_START:\r\n      return {\r\n        ...state,\r\n        isLoading: true\r\n      }\r\n    case robotActionTypes.REQUEST_ROBOTS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        robots: action.payload\r\n      }\r\n    case robotActionTypes.REQUEST_ROBOTS_FAILED:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        error: action.payload\r\n      }\r\n    case robotActionTypes.CHANGE_SEARCH_FIELD:\r\n      return {\r\n        ...state,\r\n        searchField: action.payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default robotsReducer;\r\n","import { combineReducers } from 'redux';\r\n\r\nimport robotsReducer from './robots/robots.reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    robots: robotsReducer\r\n});\r\n\r\nexport default rootReducer;","import {createStore, applyMiddleware} from 'redux';\r\nimport logger from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nimport rootReducer from './root-reducer';\r\n\r\nconst middlewares = [thunkMiddleware];\r\n\r\nif(process.env.NODE_ENV === 'development') {\r\n    middlewares.push(logger);\r\n}\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares));","import React from \"react\";\r\n\r\nimport './card.styles.css';\r\nconst Card = ({ robot }) => (\r\n  <div className=\"card\">\r\n    <img src={`https://robohash.org/${robot.id}?size=200x200`} alt=\"robot\" />\r\n    <h2>{robot.name}</h2>\r\n    <p>{robot.email}</p>\r\n  </div>\r\n);\r\n\r\nexport default Card;\r\n","import React from 'react';\r\n\r\nimport './spinner.styles.css';\r\n\r\nconst Spinner = () => (\r\n    <div className='spinner-container'>\r\n        <div className='spinner' />\r\n    </div>\r\n);\r\n\r\nexport default Spinner;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport Card from \"../card/card.component\";\r\nimport Spinner from '../spinner/spinner.component';\r\n\r\nimport \"./card-list.styles.css\";\r\n\r\nconst CardList = ({ robots, searchField, isLoading }) => {\r\n  const filteredRobots = robots.filter(robot =>\r\n    robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n  );\r\n\r\n  return (\r\n    <div className=\"card-list\">\r\n      {isLoading ? (\r\n        <Spinner/>\r\n      ) : (\r\n        filteredRobots.map(robot => <Card key={robot.id} robot={robot} />)\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  searchField: state.robots.searchField,\r\n  robots: state.robots.robots,\r\n  isLoading: state.robots.isLoading\r\n});\r\n\r\nexport default connect(mapStateToProps)(CardList);\r\n","import React from \"react\";\r\nimport {connect} from 'react-redux';\r\n\r\nimport {setSearchField} from '../../redux/robots/robots.actions';\r\n\r\nimport \"./search-box.styles.css\";\r\n\r\nconst SearchBox = ({ onSearchChange }) => (\r\n  <input\r\n    className=\"search-box\"\r\n    type=\"search\"\r\n    onChange={onSearchChange}\r\n    placeholder=\"search robots\"\r\n  />\r\n);\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSearchChange: event => dispatch(setSearchField(event.target.value))\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(SearchBox);\r\n","import robotActionTypes from \"./robots.types\";\r\n\r\nexport const setRobots = robots => ({\r\n    type: robotActionTypes.SET_ROBOTS,\r\n    payload: robots\r\n});\r\n\r\nexport const setSearchField = text => ({\r\n    type: robotActionTypes.CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n});\r\n\r\nexport const requestRobots = () => dispatch => {\r\n    dispatch({ type: robotActionTypes.REQUEST_ROBOTS_START });\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then(data => data.json())\r\n      .then(users =>\r\n        dispatch({\r\n          type: robotActionTypes.REQUEST_ROBOTS_SUCCESS,\r\n          payload: users\r\n        })\r\n      )\r\n      .catch(error =>\r\n        dispatch({\r\n          type: robotActionTypes.REQUEST_ROBOTS_FAILED,\r\n          payload: error\r\n        })\r\n      );\r\n  };","import React from \"react\";\r\n\r\nimport \"./error-boundary.styles.css\";\r\n\r\nclass ErrorBoundary extends React.Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      hasErrored: false\r\n    };\r\n  }\r\n\r\n  static getDerivedStateFromError(error) {\r\n    return { hasErrored: true };\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    console.log(error);\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasErrored) {\r\n      return (\r\n        <div className=\"error-image-overlay\">\r\n          <img src=\"https://i.imgur.com/yW2W9SC.png\" alt=\"error\" />\r\n          <h2>This page is broken</h2>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport CardList from \"./components/card-list/card-list.component\";\nimport SearchBox from \"./components/search-box/search-box.component\";\nimport ErrorBoundary from './components/error-boundary/error-boundary.component';\n\nimport { setRobots, requestRobots } from \"./redux/robots/robots.actions\";\n\nimport \"./App.css\";\n\nclass App extends React.Component {\n  \n  componentDidMount() {\n    this.props.requestRobots();\n  }\n\n  render() {\n    return (\n      <ErrorBoundary>\n        <div className=\"App\">\n          <h1>Robo Friends</h1>\n          <SearchBox />\n          <hr />\n          <CardList />\n        </div>\n      </ErrorBoundary>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  setRobots: robots => dispatch(setRobots(robots)),\n  requestRobots: () => dispatch(requestRobots())\n});\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(App);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport { store } from \"./redux/store\";\n\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}